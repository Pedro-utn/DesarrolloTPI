networks:
  net:
    driver: bridge

volumes:
  postgres-db:
  postgres_data:

services:
  # === SERVICIOS JWT (EJECUTAN PRIMERO) ===

# 1. Base de datos JWT
  database-jwt:
    image: postgres:alpine
    container_name: trabajojwt-db
    restart: always
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    ports:
      - "4444:5432"
    volumes:  
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 2s
      retries: 5
    networks:
      - net

# 2. Servicio JWT
  jwt:
    build:
      context: ./JWT
      dockerfile: Dockerfile
    container_name: backend-jwt
    ports:
      - "3001:3001"
    volumes:
      - ./JWT:/usr/src/app          # ← Agregar bind mount
      - /usr/src/app/node_modules   # ← Evitar conflictos con node_modules
    environment:
      - NODE_ENV=development        # ← Cambiar a development para hot-reload
    restart: unless-stopped
    depends_on:
      database-jwt:
        condition: service_healthy
    networks:
      - net


# 3. Inicialización de DB JWT
  db-init-jwt:
    image: postgres:alpine
    container_name: db-init
    entrypoint: |
      sh -c "
      if [ ! -f /shared/init_done ]; then
        sleep 10
        PGPASSWORD=postgres psql -h db -U postgres -d postgres -f /init.sql
        touch /shared/init_done
        echo 'Database initialized'
      else
        echo 'Database already initialized, skipping...'
      fi
      "

    environment:
      POSTGRES_PASSWORD: postgres

    volumes:
      - ./JWT/sql/init.sql:/init.sql:ro
      - postgres_data:/shared
    depends_on:
      jwt:
        condition: service_started

    networks:
      - net
    restart: "no"

# === SERVICIOS BACKEND PRINCIPAL (EJECUTAN DESPUÉS) ===

# 4. Base de datos principal
  database-backend:
    image: postgres:alpine
    environment:
      - POSTGRES_PASSWORD=1234
      - POSTGRES_USER=postgres
      - POSTGRES_DB=ordenycompra
      - POSTGRES_INITDB_ARGS=--auth-host=md5 --auth-local=trust
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 2s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres-db:/var/lib/postgresql/data
    networks:
      - net


# 5. Backend principal
  backend:
    build: 
      context: ./backendTPI
      dockerfile: ./.devcontainer/dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./backendTPI:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      - NODE_ENV=development
      - DATABASE_HOST=database
      - DATABASE_PORT=5432
      - DATABASE_NAME=ordenycompra
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=1234
      - JWT_SERVICE_URL=http://jwt:3001  # ← Agregar esta línea
    depends_on:
      database-backend:
        condition: service_healthy
    networks:
      - net
    restart: unless-stopped

# 6. Frontend Angular
  frontend:
    build: 
      context: ./frontend
      dockerfile: ./dockerfile
    ports:
    - "4200:4200"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
    networks:
      - net